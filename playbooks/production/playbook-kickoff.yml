---
- name: Download Required Files to Localhost
  hosts: localhost
  vars:
    windows_agent_file: "elastic-agent-7.17.4-windows-x86_64.zip"
    windows_agent_url: "https://artifacts.elastic.co/downloads/beats/elastic-agent/{{ windows_agent_file }}"
    python_windows_file: "python-3.11.2-amd64.exe"
    python_windows_url: "https://www.python.org/ftp/python/3.11.2/{{ python_windows_file }}"
    python_linux_file: "Python-3.11.2.tar.xz"
    python_linux_url: "https://www.python.org/ftp/python/3.11.2/{{ python_linux_file }}"
  tasks:
  - name: Download and extract Elastic Agent for Windows
    get_url:
      url: "{{ windows_agent_url }}"
      dest: "roles/windows/elastic-agent/files/{{ windows_agent_file }}"
    when: not (ansible_check_mode | bool) and not (file_exists.stat.exists)
    vars:
      file_exists: "{{ stat('roles/windows/elastic-agent/files/' + windows_agent_file) | default(undefined, true) }}"

  - name: Extract Elastic Agent for Windows
    archive:
      src: "roles/windows/elastic-agent/files/{{ windows_agent_file }}"
      dest: "roles/windows/elastic-agent/files/"
      format: zip
    when: not (ansible_check_mode | bool) and not (file_exists.stat.exists)
    vars:
      file_exists: "{{ stat('roles/windows/elastic-agent/files/' + windows_agent_file) | default(undefined, true) }}"

  - name: Download Python for Windows
    get_url:
      url: "{{ python_windows_url }}"
      dest: "roles/windows/install-python311/files/{{ python_windows_file }}"
    when: not (ansible_check_mode | bool) and not (file_exists.stat.exists)
    vars:
      file_exists: "{{ stat('roles/windows/install-python311/files/' + python_windows_file) | default(undefined, true) }}"

  - name: Download Python for Linux
    get_url:
      url: "{{ python_linux_url }}"
      dest: "ansible/roles/linux/install-python311/files/{{ python_linux_file }}"
    when: not (ansible_check_mode | bool) and not (file_exists.stat.exists)
    vars:
      file_exists: "{{ stat('ansible/roles/linux/install-python311/files/' + python_linux_file) | default(undefined, true) }}"

  - name: Verify Elastic Agent for Windows exists
    assert:
      that:
        - file_exists.stat.exists
      msg: "Elastic Agent for Windows could not be downloaded or does not exist"
    vars:
      file_exists: "{{ stat('roles/windows/elastic-agent/files/' + windows_agent_file) | default(undefined, true) }}"

  - name: Verify Python for Windows exists
    assert:
      that:
        - file_exists.stat.exists
      msg: "Python for Windows could not be downloaded or does not exist"
    vars:
      file_exists: "{{ stat('../../roles/windows/install-python311/files/' + python_windows_file) | default(undefined, true) }}"

  - name: Verify Python for Linux exists
    assert:
      that:
        - file_exists.stat.exists
      msg: "Python for Linux could not be downloaded or does not exist"
    vars:
      file_exists: "{{ stat('ansible/roles/linux/install-python311/files/' + python_linux_file) | default(undefined, true) }}"

- name: Configure Windows system for log ingestion (Elastic Agent)
  hosts: "{{ elastic_targets }}"
  gather_facts: false
  vars:
    ansible_user: "{{ vault_den_user }}"
    ansible_password: "{{ vault_den_user_password }}"
  roles:
    - role: roles/windows/root-cert
    - role: roles/windows/elastic-agent

- name: Auto connect collector
  hosts: gns3
  gather_facts: false
  become: true
  vars:
    ansible_user: "{{ vault_linux_user }}"
    ansible_password: "{{ vault_linux_user_password }}"
    ansible_become_password: "{{ vault_linux_user_password }}"
    ansible_connection: ssh
    reconnection_retries: 10
    timeout: 60
    gns3_server: "http://10.255.255.100"
    gns3_project: "COBRA DEN"
    node_links:
      - ["collector", "Ethernet1", "External", "eth7"]
      - ["collector", "Ethernet2", "DMZ", "eth7"]
      - ["collector", "Ethernet3", "Internal", "eth7"]
      - ["collector", "Ethernet4", "CN-RTR-1", "eth7"]
      - ["collector", "Ethernet5", "CN-RTR-2", "eth7"]
      - ["collector", "Ethernet6", "CN-RTR-3", "eth7"]
      - ["collector", "Ethernet7", "CN-RTR-4", "eth7"]
  collections:
    - davidban77.gns3
  tasks:
    - name: Auto-tap routers
      gns3_project:
        url: "{{ gns3_server }}"
        project_name: "{{ gns3_project }}"
        links_spec: "{{ node_links }}"
        state: present

- name: Login random users to client workstations
  hosts: user1 user2 user3 user4 user5 user6 user7 user8 user9 user10 user11 user12 user13 user14 user15 user16 user17 user18 user19 user20  user21 user22 user23 user24 user25 user26 user27 user28 user29 user30
  gather_facts: false
  vars:
    ansible_user: "{{ vault_den_user }}"
    ansible_password: "{{ vault_den_user_password }}"
    username: "{{ uname }}"
  roles:
    - role: roles/windows/gpupdate
    - role: roles/windows/login-random-users

- name: Download and install Python311 on Windows
  hosts: "{{ target_host }}"
  gather_facts: false
  vars:
    ansible_user: "{{ vault_den_user }}"
    ansible_password: "{{ vault_den_user_password }}"
  roles:
    - role: roles/windows/install-python311

- name: Install VS Code on Windows target
  hosts: "{{ target_host }}"
  gather_facts: false
  vars:
    ansible_user: "{{ vault_den_user }}"
    ansible_password: "{{ vault_den_user_password }}"
    ansible_connection: winrm
    ansible_winrm_transport: credssp
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_operation_timeout_sec: 1000
    ansible_winrm_read_timeout_sec: 3200
    ansible_winrm_connection_timeout_sec: 2000
    reconnection_retries: 10
    log_file_path: "./files/logs/ansible-errors.log"
    timeout: 60
    vs_code_url: "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user"
  roles:
    - windows/vscode

