---
- name: Install community.general collection
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Check if community.general collection is already installed
      command: ansible-galaxy collection list
      register: galaxy_list
      changed_when: false

    - name: Install collections
      include_role:
        name: ansible-galaxy
      vars:
        galaxy_install_collections:
          - community.general
      when: "'community.general' not in galaxy_list.stdout"

- name: Download Required Files to Localhost
  hosts: localhost
  vars:
    windows_agent_file: "elastic-agent-7.17.4-windows-x86_64.zip"
    windows_agent_dir: "roles/windows/elastic-agent/files"
    windows_agent_name: "elastic-agent-7.17.4-windows-x86_64"
    windows_agent_url: "https://artifacts.elastic.co/downloads/beats/elastic-agent/{{ windows_agent_file }}"
  tasks:  
  - name: Check if Elastic Agent for Windows exists
    ansible.windows.win_stat:
      path: "{{ windows_agent_dir }}/{{ windows_agent_file }}"
    register: file_exists
    ignore_errors: true

  - name: Download and extract Elastic Agent for Windows
    get_url:
      url: "{{ windows_agent_url }}"
      dest: "{{ windows_agent_dir }}/{{ windows_agent_file }}"

- name: Extract Elastic Agent for Windows
  ansible.builtin.unarchive:
    src: "{{ windows_agent_dir }}/{{ windows_agent_file }}"
    dest: "{{ windows_agent_dir }}"
    remote_src: true
    copy: false
    extra_opts: [--symlinks]
    creates: "{{ windows_agent_dir }}/{{ windows_agent_name }}"
  when: not (ansible_check_mode | bool) and not (file_exists.stat.exists)
  vars:
    file_exists: "{{ lookup('file', windows_agent_dir + '/' + windows_agent_file) }}"


  # - name: Verify Elastic Agent for Windows exists
  #   assert:
  #     that:
  #       - file_exists.stat.exists
  #     msg: "Elastic Agent for Windows could not be downloaded or does not exist"

- name: "Configure Windows system for log ingestion (Elastic Agent)"
  hosts: "{{ elastic_targets }}"
  gather_facts: false
  vars_files:
    - cobra.vault
  vars:
    ansible_user: "{{ vault_den_user }}"
    ansible_password: "{{ vault_den_user_password }}"
    ansible_connection: winrm
    ansible_winrm_transport: credssp
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_operation_timeout_sec: 1000
    ansible_winrm_read_timeout_sec: 3200
    ansible_winrm_connection_timeout_sec: 2000
    reconnection_retries: 10
    timeout: 60
  roles:
    - role: roles/windows/root-cert
    - role: roles/windows/elastic-agent
